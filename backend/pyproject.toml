[project]
name = "noisenet-backend"
version = "0.1.0"
description = "OpenNoiseNet Backend API"
authors = [
    { name = "OpenNoiseNet Contributors", email = "info@noisenet.org" }
]
# readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
keywords = ["noise", "monitoring", "environment", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    # Core FastAPI and ASGI
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Background tasks
    "celery[redis]>=5.3.0",
    "redis>=5.0.0",
    
    # Audio processing
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    
    # Geospatial
    "geoalchemy2>=0.14.0",
    "shapely>=2.0.0",
    "geojson>=3.0.0",
    
    # HTTP client
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
    
    # Data validation and serialization
    "pydantic-extra-types>=2.1.0",
    "email-validator>=2.1.0",
    
    # Monitoring and observability
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "faker>=19.0.0",
    
    # Code quality
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

production = [
    "gunicorn>=21.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
]

[project.urls]
Homepage = "https://github.com/open-noisenet/open-noisenet"
Documentation = "https://docs.noisenet.org"
Repository = "https://github.com/open-noisenet/open-noisenet"
"Bug Tracker" = "https://github.com/open-noisenet/open-noisenet/issues"

[project.scripts]
noisenet-cli = "app.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG", "S101"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "librosa.*",
    "soundfile.*",
    "scipy.*",
    "shapely.*",
    "geojson.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "app/tests/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]