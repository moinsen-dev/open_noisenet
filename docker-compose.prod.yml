version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-noisenet}
      POSTGRES_USER: ${POSTGRES_USER:-noisenet}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-noisenet}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - noisenet
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - noisenet
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-noisenet}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-noisenet}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      SECRET_KEY: ${SECRET_KEY:-production-secret-key-change-me}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://yourdomain.com}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - noisenet
    restart: unless-stopped

  celery:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.workers.celery worker --loglevel=info --concurrency=2
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-noisenet}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-noisenet}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      SECRET_KEY: ${SECRET_KEY:-production-secret-key-change-me}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - noisenet
    restart: unless-stopped

  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.workers.celery beat --loglevel=info --schedule=/app/celerybeat-schedule
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-noisenet}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-noisenet}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      SECRET_KEY: ${SECRET_KEY:-production-secret-key-change-me}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    volumes:
      - celery_beat:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - noisenet
    restart: unless-stopped

  # OpenNoiseNet Landing Page
  landing:
    build:
      context: ./landing
      dockerfile: Dockerfile
    container_name: opennosienet-landing
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - HOSTNAME=0.0.0.0
      - PORT=3000
    restart: unless-stopped
    networks:
      - noisenet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-https://yourdomain.com/api}
        - REACT_APP_MAPBOX_TOKEN=${REACT_APP_MAPBOX_TOKEN:-}
    ports:
      - "3001:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - noisenet
    restart: unless-stopped

  # Reverse proxy to route frontend on domain root and API on /api/*
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/production.conf:/etc/nginx/nginx.conf:ro
      - static_files:/var/www/static:ro
    depends_on:
      - backend
      - frontend
    networks:
      - noisenet
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  celery_beat:
  static_files:

networks:
  noisenet:
    driver: bridge